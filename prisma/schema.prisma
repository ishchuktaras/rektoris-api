// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// School model
model School {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  slug        String       @unique
  students    Student[] // Relation to Student model
  parents     Parent[] // Relation to Parent model
  departments Department[] // Relation to Department model
  teachers    Teacher[] // Relation to Teacher model
  classes     Class[] // Relation to Class model
  streams     Stream[] // Relation to Stream model
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("schools")
}

// Contact 
model Contact {
  id               String   @id @default(cuid())
  firstName        String
  lastName         String
  email            String   @unique
  phone            String
  schoolName       String   @unique
  country          String
  schoolPage       String
  numberOfStudents Int
  role             String
  media            String
  pointsToSolve    String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("contacts")
}

// Class model - can have multiple streams
model Class {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  streams   Stream[] // Relation to Stream model
  students  Student[] // Relation to Student model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  schoolId  String
  school    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("classes")
}

// Stream model - belongs to a class
model Stream {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  classId   String // Foreign key for Class
  class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
  schoolId  String
  school    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("streams")
}

// User model
enum UserRole {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  role       UserRole
  name       String
  phone      String?
  image      String?
  schoolId   String?
  schoolName String?

  teacher       Teacher?
  student       Student?
  parent        Parent?
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// Refresh Token model
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Parents model
model Parent {
  id             String    @id @default(cuid())
  title          String
  firstName      String
  lastName       String
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id])
  relationship   String
  email          String    @unique
  nationalId     String    @unique
  gender         String
  dateOfBirth    DateTime
  phone          String    @unique
  nationality    String
  whatsappNumber String?
  contactMethod  String
  occupation     String
  address        String
  password       String
  imageUrl       String?
  students       Student[]
  schoolId       String?
  schoolName     String
  school         School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("parents")
}

// Students model
model Student {
  id                     String   @id @default(cuid())
  name                   String
  firstName              String
  lastName               String
  email                  String   @unique
  parentId               String
  parentName             String?
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id])
  classTitle             String?
  classId                String
  streamTitle            String?
  streamId               String
  password               String
  imageUrl               String?
  phone                  String?
  state                  String
  birthCertificateNumber String   @unique
  nationality            String
  religion               String
  gender                 String
  dateOfBirth            DateTime
  rollNumber             String   @unique
  sponsorshipType        String?  @default("PS")
  regNo                  String   @unique
  admissionDate          DateTime
  address                String
  schoolId               String
  schoolName             String
  school                 School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relationships (assuming these exist)
  parent Parent @relation(fields: [parentId], references: [id], onDelete: Cascade)
  class  Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  stream Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  @@map("students")
}

enum StudentSponsorshipType {
  PS
  SS
}

// Teachers model
model Teacher {
  id               String              @id @default(cuid())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  userId           String              @unique
  user             User                @relation(fields: [userId], references: [id])
  firstName        String
  lastName         String
  title            String
  email            String              @unique
  phone            String              @unique
  whatsappNumber   String
  dateOfBirth      DateTime?
  gender           Gender
  imageUrl         String?
  nationalId       String              @unique
  password         String? // Hashed password
  isActive         Boolean             @default(true)
  lastLogin        DateTime?
  contactMethod    String
  role             TeacherRole         @default(TEACHER)
  employeeId       String?             @unique
  dateOfJoining    DateTime
  designation      String
  departmentName   String
  department       Department          @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId     String
  mainSubject      String?
  mainSubjectId    String?
  qualification    String?
  salary           Decimal?            @db.Decimal(10, 2)
  subjects         String[]
  classes          String[]
  classIds         String[]
  lessons          Lesson[]
  attendance       TeacherAttendance[]
  address          String?
  nationality      String?
  emergencyContact EmergencyContact?
  experience       Int?
  bio              String?             @db.Text
  skills           String?
  // School Relationship
  school           School              @relation(fields: [schoolId], references: [id])
  schoolId         String
  schoolName       String
  documents        TeacherDocument[]
  leaves           TeacherLeave[]
  evaluations      TeacherEvaluation[]

  @@map("teachers")
}

// Department Model
model Department {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  school       School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId     String
  hodId        String?
  hodName      String?
  hodStartDate DateTime?
  teachers     Teacher[]
  subjects     Subject[]
  budjet       Float?
  budjetYear   String?

  @@map("departments")
}

// Emergency Contact Model
model EmergencyContact {
  id           String  @id @default(cuid())
  name         String
  relationship String
  phone        String
  email        String?
  teacher      Teacher @relation(fields: [teacherId], references: [id])
  teacherId    String  @unique
}

// Subject Model
model Subject {
  id             String          @id @default(cuid())
  name           String
  slug           String          @unique
  code           String          @unique
  shortName      String?
  category       SubjectCategory
  type           SubjectType
  passingMarks   Int?
  totalMarks     Int?
  department     Department?     @relation(fields: [departmentId], references: [id])
  departmentId   String
  departmentName String
  isActive       Boolean         @default(true)
  isOptional     Boolean         @default(false)
  hasTheory      Boolean         @default(true)
  hasPractical   Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // If Practical
  labRequired Boolean @default(false)

  @@map("subjects")
}

enum SubjectCategory {
  CORE
  ELECTIVE
  ADDITIONAL
  VOCATIONAL
  LANGUAGE
  SCIENCE
  ARTS
  COMMERCE
  EXTRA_CURRUCULAR
  OTHER
}

enum SubjectType {
  THEORY
  PRACTICAL
  ELECTIVE
}

// SchoolClass Model
model SchoolClass {
  id      String  @id @default(cuid())
  name    String
  grade   String
  section String?
}

// Teacher Document Model
model TeacherDocument {
  id         String       @id @default(cuid())
  teacher    Teacher      @relation(fields: [teacherId], references: [id])
  teacherId  String
  title      String
  type       DocumentType
  url        String
  uploadedAt DateTime     @default(now())
  expiryDate DateTime?

  @@index([teacherId])
  @@map("teacherDocuments")
}

// Teacher Attendance Model
model TeacherAttendance {
  id        String           @id @default(cuid())
  teacher   Teacher          @relation(fields: [teacherId], references: [id])
  teacherId String
  date      DateTime
  status    AttendanceStatus
  checkIn   DateTime?
  checkOut  DateTime?
  notes     String?

  @@unique([teacherId, date])
  @@map("teacherAttendences")
}

// Teacher Leave Model
model TeacherLeave {
  id         String      @id @default(cuid())
  teacher    Teacher     @relation(fields: [teacherId], references: [id])
  teacherId  String
  startDate  DateTime
  endDate    DateTime
  type       LeaveType
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?

  @@index([teacherId])
  @@map("teacherLeaves")
}

// Teacher Evaluation Model
model TeacherEvaluation {
  id        String   @id @default(cuid())
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String
  evaluator String
  date      DateTime
  rating    Int      @db.SmallInt
  feedback  String
  goals     String?
}

// Lesson Model
model Lesson {
  id        String       @id @default(cuid())
  teacher   Teacher      @relation(fields: [teacherId], references: [id])
  teacherId String
  subject   String
  topic     String
  date      DateTime
  duration  Int // in minutes
  status    LessonStatus @default(SCHEDULED)
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum TeacherRole {
  TEACHER
  HEAD_TEACHER
  COORDINATOR
  HOD
}

enum DocumentType {
  CERTIFICATE
  RESUME
  CONTRACT
  QUALIFICATION
  ID_PROOF
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  ON_LEAVE
}

enum LeaveType {
  SICK
  CASUAL
  VACATION
  MATERNITY
  PATERNITY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum LessonStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
